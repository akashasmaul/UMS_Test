// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UMS.UI.Test.ERP.Areas.Student.Image.ImageDownload
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ImageDownloadFeature : object, Xunit.IClassFixture<ImageDownloadFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Areas/Student/Image/ImageDownload", "ImageDownload", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ImageDownload.feature"
#line hidden
        
        public ImageDownloadFeature(ImageDownloadFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="DownloadImage")]
        [Xunit.TraitAttribute("FeatureTitle", "ImageDownload")]
        [Xunit.TraitAttribute("Description", "DownloadImage")]
        [Xunit.TraitAttribute("Category", "NeedsLogin")]
        [Xunit.TraitAttribute("Category", "DataSource:../../../../TestData/Student/Image/ImageDownload/ImageDownloadData.xls" +
            "x")]
        [Xunit.TraitAttribute("Category", "DataSet:Sheet1")]
        [Xunit.TraitAttribute("Category", "tag1")]
        [Xunit.InlineDataAttribute("udvash", "Engineering Admission Program", "2024", " Engineering Full Course (Offline),   Engineering Full Course (Combo)    ", "All", "Bangla", " Farmgate (MT) Udvash", " Malek Tower Campus (Farmgate (MT) Udvash)", "Online Batch", "03:00 PM to 05:30 PM", "Combo", "Registration No, Full Name, Mobile Number(Student)", "", "", "", new string[0])]
        [Xunit.InlineDataAttribute("UDVASH", "Engineering Admission Program", "2024", " Engineering Full Course (Offline)", "Male, female", "english, Select All", " Farmgate (MT) Udvash", "Concord Tower Campus  (Farmgate (MT) Udvash),  Malek Tower Campus (Farmgate (MT) " +
            "Udvash)", "Sat, Mon, Wed", "01:30 PM to 04:00 PM", "Progga-01", "roll , image, Mobile Number", "", "", "", new string[0])]
        [Xunit.InlineDataAttribute("Udvash", "Engineering Admission Program", "2024", " Engineering Full Course (Offline)", "Male, female", "english, Select All", " Farmgate (MT) Udvash", "Concord Tower Campus  (Farmgate (MT) Udvash),  Malek Tower Campus (Farmgate (MT) " +
            "Udvash)", "Sun, Tue", "10:15 AM to 12:45 PM, 04:15 PM to 06:45 PM", "Protigga-02, Prottasha-02", "Roll No., Nick Name, Full Name, Mobile Number(Father)", "10216600311", "Mahi", "", new string[0])]
        [Xunit.InlineDataAttribute("udVAsh", "Engineering Admission Program", "2024", "select All", "male,female,combined", "BanglA, English", " Farmgate (MT) Udvash", "Concord Tower Campus  (Farmgate (MT) Udvash), select all", "Sat, Mon, Wed, Sun, Tue, Thu", "10:15 AM to 12:45 PM, All", "All", "Select All ", "3309937", "Akash", "01781770073", new string[0])]
        public async System.Threading.Tasks.Task DownloadImage(
                    string organization, 
                    string program, 
                    string session, 
                    string course, 
                    string gender, 
                    string version, 
                    string branch, 
                    string campus, 
                    string batchType, 
                    string batchTime, 
                    string batch, 
                    string information, 
                    string regOrRoll, 
                    string nickName, 
                    string mobileNumber, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NeedsLogin",
                    "DataSource:../../../../TestData/Student/Image/ImageDownload/ImageDownloadData.xls" +
                        "x",
                    "DataSet:Sheet1",
                    "tag1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Organization", organization);
            argumentsOfScenario.Add("Program", program);
            argumentsOfScenario.Add("Session", session);
            argumentsOfScenario.Add("Course", course);
            argumentsOfScenario.Add("Gender", gender);
            argumentsOfScenario.Add("Version", version);
            argumentsOfScenario.Add("Branch", branch);
            argumentsOfScenario.Add("Campus", campus);
            argumentsOfScenario.Add("BatchType", batchType);
            argumentsOfScenario.Add("BatchTime", batchTime);
            argumentsOfScenario.Add("Batch", batch);
            argumentsOfScenario.Add("Information", information);
            argumentsOfScenario.Add("RegOrRoll", regOrRoll);
            argumentsOfScenario.Add("NickName", nickName);
            argumentsOfScenario.Add("MobileNumber", mobileNumber);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("DownloadImage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("Go to Image Download Page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync("Image Download Page Loads", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.AndAsync(string.Format("Select \"{0}\" Organization", organization), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.AndAsync(string.Format("Select \"{0}\" Program", program), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.AndAsync(string.Format("Select \"{0}\" Session", session), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
 await testRunner.AndAsync(string.Format("Select \"{0}\" Course", course), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
 await testRunner.AndAsync(string.Format("Select \"{0}\" Gender", gender), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
 await testRunner.AndAsync(string.Format("Select \"{0}\" Version", version), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
 await testRunner.AndAsync(string.Format("Select \"{0}\" Branch", branch), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
 await testRunner.AndAsync(string.Format("Select \"{0}\" Campus", campus), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
 await testRunner.AndAsync(string.Format("Select \"{0}\" BatchType", batchType), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
 await testRunner.AndAsync(string.Format("Select \"{0}\" BatchTime", batchTime), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
 await testRunner.AndAsync(string.Format("Select \"{0}\" Batch", batch), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
 await testRunner.AndAsync("Click Count Button and Get Counts", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
 await testRunner.AndAsync("Click Image Download Button \"Yes\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ImageDownloadFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ImageDownloadFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
