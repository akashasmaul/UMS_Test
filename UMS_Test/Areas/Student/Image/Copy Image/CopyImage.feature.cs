// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UMS.UI.Test.ERP.Areas.Student.Image.CopyImage
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CopyImageFeature : object, Xunit.IClassFixture<CopyImageFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Areas/Student/Image/Copy Image", "CopyImage", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CopyImage.feature"
#line hidden
        
        public CopyImageFeature(CopyImageFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="CopyImage")]
        [Xunit.TraitAttribute("FeatureTitle", "CopyImage")]
        [Xunit.TraitAttribute("Description", "CopyImage")]
        [Xunit.TraitAttribute("Category", "NeedsLogin")]
        [Xunit.TraitAttribute("Category", "DataSource:../../../../TestData/Student/Image/ImageCopy/ImageCopyData.xlsx")]
        [Xunit.TraitAttribute("Category", "DataSet:Sheet1")]
        [Xunit.TraitAttribute("Category", "tag1")]
        [Xunit.InlineDataAttribute("udvash", "Engineering Admission Program", "2024", "udvash, udvash, udvash", "Varsity \'KA\' Admission Program, Varsity \'KHA\' Admission Program, College Admissio" +
            "n Program", " 2024,2024,2024 ", "5", new string[0])]
        [Xunit.InlineDataAttribute("UDVASH", "Engineering Admission Program", "2024", "UDVASH", "Varsity \'KA\' Admission Program", "2024", "1", new string[0])]
        [Xunit.InlineDataAttribute("Unmesh", "Medical Admission Program", "2024", "unmesh, udvash", "Medical Admission Program, Engineering Admission Program", "2023, 2024", "2", new string[0])]
        [Xunit.InlineDataAttribute("uDvAsH", "Engineering Admission Program", "2024", "", "", "", "0", new string[0])]
        public async System.Threading.Tasks.Task CopyImage(string organization, string program, string session, string targetOrganization, string targetProgram, string targetSession, string rowCount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NeedsLogin",
                    "DataSource:../../../../TestData/Student/Image/ImageCopy/ImageCopyData.xlsx",
                    "DataSet:Sheet1",
                    "tag1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Organization", organization);
            argumentsOfScenario.Add("Program", program);
            argumentsOfScenario.Add("Session", session);
            argumentsOfScenario.Add("TargetOrganization", targetOrganization);
            argumentsOfScenario.Add("TargetProgram", targetProgram);
            argumentsOfScenario.Add("TargetSession", targetSession);
            argumentsOfScenario.Add("RowCount", rowCount);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("CopyImage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("Go to Copy Image Page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync("Copy Image Page Loads", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.AndAsync(string.Format("Click Increase Row Button \"{0}\"", rowCount), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.AndAsync(string.Format("Select Organization Dropdown \"{0}\"", organization), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.AndAsync(string.Format("Select Program Dropdown \"{0}\"", program), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
 await testRunner.AndAsync(string.Format("Select Session Dropdown \"{0}\"", session), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
 await testRunner.AndAsync(string.Format("Select Target Organization Dropdown \"{0}\"", targetOrganization), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
 await testRunner.AndAsync(string.Format("Select Target Program Dropdown \"{0}\"", targetProgram), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
 await testRunner.AndAsync(string.Format("Select Target Session Dropdown \"{0}\"", targetSession), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
 await testRunner.AndAsync("Remove All Extra Target Rows Without Values", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
 await testRunner.AndAsync("Get Status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
 await testRunner.AndAsync("Click Copy Image Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
 await testRunner.ThenAsync("A Validation Message will Appear", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CopyImageFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CopyImageFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
