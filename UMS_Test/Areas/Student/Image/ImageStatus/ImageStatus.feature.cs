// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UMS.UI.Test.ERP.Areas.Student.Image.ImageStatus
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ImageStatusFeature : object, Xunit.IClassFixture<ImageStatusFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Areas/Student/Image/ImageStatus", "ImageStatus", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ImageStatus.feature"
#line hidden
        
        public ImageStatusFeature(ImageStatusFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Check Image Status")]
        [Xunit.TraitAttribute("FeatureTitle", "ImageStatus")]
        [Xunit.TraitAttribute("Description", "Check Image Status")]
        [Xunit.TraitAttribute("Category", "NeedsLogin")]
        [Xunit.TraitAttribute("Category", "DataSource:../../../../TestData/Student/Image/ImageStatus/ImageStatusData.xlsx")]
        [Xunit.TraitAttribute("Category", "DataSet:Sheet1")]
        [Xunit.InlineDataAttribute("udvash", "Engineering Admission Program", "2024", " Engineering Full Course (Offline),   Engineering Full Course (Combo)    ", "All", "Bangla", " Farmgate (MT) Udvash", " Malek Tower Campus (Farmgate (MT) Udvash)", "Online Batch", "03:00 PM to 05:30 PM", "Combo", "Roll No., Nick Name, Full Name", "", "", "", "Missing Image", new string[0])]
        [Xunit.InlineDataAttribute("UDVASH", "Engineering Admission Program", "2024", " Engineering Full Course (Offline)", "Male, female", "english, Select All", " Farmgate (MT) Udvash", "Concord Tower Campus  (Farmgate (MT) Udvash),  Malek Tower Campus (Farmgate (MT) " +
            "Udvash)", "Sat, Mon, Wed", "01:30 PM to 04:00 PM", "Progga-01", "Roll No., Nick Name, Full Name", "", "", "", "Missing Image", new string[0])]
        [Xunit.InlineDataAttribute("Udvash", "Engineering Admission Program", "2024", " Engineering Full Course (Offline)", "Male, female", "english, Select All", " Farmgate (MT) Udvash", "Concord Tower Campus  (Farmgate (MT) Udvash),  Malek Tower Campus (Farmgate (MT) " +
            "Udvash)", "Sun, Tue", "10:15 AM to 12:45 PM, 04:15 PM to 06:45 PM", "Protigga-02, Prottasha-02", "Roll No., Nick Name, Full Name", "", "", "", "Missing Image", new string[0])]
        [Xunit.InlineDataAttribute("udVAsh", "Engineering Admission Program", "2024", "select All", "male,female,combined", "BanglA, English", " Farmgate (MT) Udvash", "Concord Tower Campus  (Farmgate (MT) Udvash), select all", "Sat, Mon, Wed, Sun, Tue, Thu", "10:15 AM to 12:45 PM, All", "All", "Roll No., Nick Name, Full Name", "", "", "", "Missing Image", new string[0])]
        public async System.Threading.Tasks.Task CheckImageStatus(
                    string organization, 
                    string program, 
                    string session, 
                    string course, 
                    string gender, 
                    string version, 
                    string branch, 
                    string campus, 
                    string batchType, 
                    string batchTime, 
                    string batch, 
                    string information, 
                    string regOrRoll, 
                    string nickName, 
                    string mobileNumber, 
                    string imageStatus, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NeedsLogin",
                    "DataSource:../../../../TestData/Student/Image/ImageStatus/ImageStatusData.xlsx",
                    "DataSet:Sheet1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Organization", organization);
            argumentsOfScenario.Add("Program", program);
            argumentsOfScenario.Add("Session", session);
            argumentsOfScenario.Add("Course", course);
            argumentsOfScenario.Add("Gender", gender);
            argumentsOfScenario.Add("Version", version);
            argumentsOfScenario.Add("Branch", branch);
            argumentsOfScenario.Add("Campus", campus);
            argumentsOfScenario.Add("BatchType", batchType);
            argumentsOfScenario.Add("BatchTime", batchTime);
            argumentsOfScenario.Add("Batch", batch);
            argumentsOfScenario.Add("Information", information);
            argumentsOfScenario.Add("RegOrRoll", regOrRoll);
            argumentsOfScenario.Add("NickName", nickName);
            argumentsOfScenario.Add("MobileNumber", mobileNumber);
            argumentsOfScenario.Add("ImageStatus", imageStatus);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Check Image Status", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("Go to Image Status Page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync("Missing Image Page Loads", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.AndAsync(string.Format("Select Organization \"{0}\"", organization), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.AndAsync(string.Format("Select Program \"{0}\"", program), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.AndAsync(string.Format("Select Session \"{0}\"", session), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
 await testRunner.AndAsync(string.Format("Select Image Status \"{0}\"", imageStatus), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
 await testRunner.AndAsync(string.Format("Select Courses \"{0}\"", course), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
 await testRunner.AndAsync(string.Format("Select Gender \"{0}\"", gender), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
 await testRunner.AndAsync(string.Format("Select Version \"{0}\"", version), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
 await testRunner.AndAsync(string.Format("Select Branch \"{0}\"", branch), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
 await testRunner.AndAsync(string.Format("Select Campus \"{0}\"", campus), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
 await testRunner.AndAsync(string.Format("Select BatchType \"{0}\"", batchType), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
 await testRunner.AndAsync(string.Format("Select BatchTime \"{0}\"", batchTime), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
 await testRunner.AndAsync(string.Format("Select Batch \"{0}\"", batch), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
 await testRunner.AndAsync("Click Count Button and Get Count", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
 await testRunner.AndAsync(string.Format("Select Information \"{0}\"", information), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
 await testRunner.AndAsync(string.Format("Enter Reg No./Roll No. \"{0}\"", regOrRoll), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
 await testRunner.AndAsync(string.Format("Enter Nickname \"{0}\"", nickName), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
 await testRunner.AndAsync(string.Format("Enter Mobile Number \"{0}\"", mobileNumber), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
 await testRunner.ThenAsync("DataTable Should Appear", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ImageStatusFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ImageStatusFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
