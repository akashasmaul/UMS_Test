// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UMS.UI.Test.ERP.Areas.Student.Admission
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class StudnetAdmissionFeature : object, Xunit.IClassFixture<StudnetAdmissionFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Areas/Student/Admission", "Studnet Admission", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "NewStudentAdmission.feature"
#line hidden
        
        public StudnetAdmissionFeature(StudnetAdmissionFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="New Student ReqEnroll")]
        [Xunit.TraitAttribute("FeatureTitle", "Studnet Admission")]
        [Xunit.TraitAttribute("Description", "New Student ReqEnroll")]
        [Xunit.TraitAttribute("Category", "NeedsLogin")]
        [Xunit.TraitAttribute("Category", "DataSource:../../../TestData/Student/Admission/AdmissionData.xlsx")]
        [Xunit.TraitAttribute("Category", "DataSet:Admission")]
        [Xunit.InlineDataAttribute("EAP", "01781770073", "Male", "Islam", "Admission", "Engineering Admission Program", "2024", "Dhaka Art College", "Bangla", "Farmgate (MT) Udvash", "Malek Tower Campus", "", "First Timer", "Science", "Engineering Full Course (Offline)", "English,Biology,Physics,Chemistry, General Knowledge", "Sat, Mon, Wed", "1:30 PM To 4:00 PM", "3000", "polash", "Top Student", "ABCD", "", "10000", new string[0])]
        [Xunit.InlineDataAttribute("Medi", "01781770073", "Male", "Islam", "Admission", "Medical Admission Program", "2024", "Dhaka Art College", "Bangla", "Farmgate Unmesh", "Concord Tower Campus", "Uttara Unmesh", "3", "Science", "Medical & Dental Full Course (Offline)", "English,Biology,Physics,Chemistry, General Knowledge", "2", "1", "3000", "polash", "Top Student", "ABCD", "", "", new string[0])]
        [Xunit.InlineDataAttribute("VaKa", "01781770073", "Male", "Islam", "Admission", "Varsity \'KA\' Admission Program", "2024", "Dhaka Art College", "Bangla", "Mirpur Udvash", "Stadium Campus", "N/A", "First", "Science", "Varsity \'KA\' & Guccho Full Course (Offline), Test Com", "", "Sat, Mon, Wed", "1", "10000", "polash", "Top Student", "ABCD", "", "", new string[0])]
        [Xunit.InlineDataAttribute("EAP Combo", "01781770073", "Male", "Islam", "Admission", "Engineering Admission Program (Online)", "2024", "Dhaka Art College", "Bangla", "Online Branch", "Online Campus", "Farmgate Udvash-Unmesh", "First Timer", "Science", "Engineering Full Course (Combo)", "English,Physics,Chemistry, Higher Mathematics", "Online Batch", "8:00 PM To 10:30 PM", "3000", "polash", "Top Student", "ABCD", "", "10000", new string[0])]
        public async System.Threading.Tasks.Task NewStudentReqEnroll(
                    string nickName, 
                    string mobileNumber, 
                    string gender, 
                    string religion, 
                    string @class, 
                    string program, 
                    string session, 
                    string lastInstitute, 
                    string studyVersion, 
                    string branch, 
                    string campus, 
                    string physicalBranch, 
                    string secondTimerStatus, 
                    string academicGroup, 
                    string course, 
                    string subject, 
                    string batchType, 
                    string batchTime, 
                    string specialDiscount, 
                    string discountBy, 
                    string discountType, 
                    string discountNote, 
                    string recievedAmount, 
                    string count, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NeedsLogin",
                    "DataSource:../../../TestData/Student/Admission/AdmissionData.xlsx",
                    "DataSet:Admission"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("NickName", nickName);
            argumentsOfScenario.Add("MobileNumber", mobileNumber);
            argumentsOfScenario.Add("Gender", gender);
            argumentsOfScenario.Add("Religion", religion);
            argumentsOfScenario.Add("Class", @class);
            argumentsOfScenario.Add("Program", program);
            argumentsOfScenario.Add("Session", session);
            argumentsOfScenario.Add("LastInstitute", lastInstitute);
            argumentsOfScenario.Add("StudyVersion", studyVersion);
            argumentsOfScenario.Add("Branch", branch);
            argumentsOfScenario.Add("Campus", campus);
            argumentsOfScenario.Add("PhysicalBranch", physicalBranch);
            argumentsOfScenario.Add("SecondTimerStatus", secondTimerStatus);
            argumentsOfScenario.Add("AcademicGroup", academicGroup);
            argumentsOfScenario.Add("Course", course);
            argumentsOfScenario.Add("Subject", subject);
            argumentsOfScenario.Add("BatchType", batchType);
            argumentsOfScenario.Add("BatchTime", batchTime);
            argumentsOfScenario.Add("SpecialDiscount", specialDiscount);
            argumentsOfScenario.Add("DiscountBy", discountBy);
            argumentsOfScenario.Add("DiscountType", discountType);
            argumentsOfScenario.Add("DiscountNote", discountNote);
            argumentsOfScenario.Add("RecievedAmount", recievedAmount);
            argumentsOfScenario.Add("Count", count);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("New Student ReqEnroll", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("User navigates to Student Admission Page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync(string.Format("Enter The Student Nickname \"{0}\"", nickName), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.AndAsync(string.Format("Enter The Student Mobile Number \"{0}\"", mobileNumber), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.AndAsync(string.Format("Select Student Gender \"{0}\"", gender), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.AndAsync(string.Format("Select Student Religion \"{0}\"", religion), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
 await testRunner.AndAsync(string.Format("Select Student Class \"{0}\" Type", @class), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
 await testRunner.AndAsync(string.Format("Select Student Program \"{0}\" Name", program), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
 await testRunner.AndAsync(string.Format("Select Session \"{0}\" Of Program", session), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
 await testRunner.AndAsync(string.Format("Search Last Educational Institute \"{0}\"", lastInstitute), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
 await testRunner.AndAsync(string.Format("Select Study Version \"{0}\" Type", studyVersion), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
 await testRunner.AndAsync(string.Format("Select Branch Name \"{0}\" Of Program", branch), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
 await testRunner.AndAsync(string.Format("Select Attched Physical Branch \"{0}\" if Available", physicalBranch), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
 await testRunner.AndAsync(string.Format("Select Campus Name \"{0}\" Of Branch", campus), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
 await testRunner.AndAsync(string.Format("Click On Is Student Second Timer \"{0}\"", secondTimerStatus), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
 await testRunner.AndAsync(string.Format("Click On Student Academic Group \"{0}\"", academicGroup), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
 await testRunner.AndAsync(string.Format("Select Course Name \"{0}\" Of Program", course), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
 await testRunner.AndAsync(string.Format("Select Subject \"{0}\" Based on Course \"{1}\"", subject, course), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
 await testRunner.AndAsync(string.Format("Select Batch Type \"{0}\" Of This Course", batchType), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
 await testRunner.AndAsync(string.Format("Select Batch Time \"{0}\" Of This Course", batchTime), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
 await testRunner.AndAsync("Select Batch Name Of This Course", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
 await testRunner.AndAsync("Click On Admission Payment Next Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
 await testRunner.ThenAsync("Show Admission Payment Details Section", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 30
 await testRunner.AndAsync(string.Format("Enter Special Discount \"{0}\" Ammount", specialDiscount), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
 await testRunner.AndAsync(string.Format("Select Special Discount \"{0}\" Approved By", discountBy), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
 await testRunner.AndAsync(string.Format("Select Special Discount \"{0}\" Type", discountType), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
 await testRunner.AndAsync(string.Format("Enter Special Discount \"{0}\" Note", discountNote), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
 await testRunner.WhenAsync(string.Format("Enter Admission Received Amount \"{0}\"", recievedAmount), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
 await testRunner.AndAsync("Click On New Admission Submit Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
 await testRunner.ThenAsync("Student should be successfully admitted", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await StudnetAdmissionFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await StudnetAdmissionFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
